from keras.layers.recurrent import Recurrent, SimpleRNN, GRU, LSTM

# Usage
Recurrent(return_sequences=False,
          go_backwards=False,
          stateful=False,
          unroll=False,
          implementation=0)
SimpleRNN(units,
          activation='tanh',
          use_bias=True,
          kernel_initialization='glorot_uniform', # same as Xavier
          recurrent_initialization='orthogonal',
          bias_initializer='zeros',
          kernel_regularizer=None,
          recurrent_regularizer=None,
          bias_regularizer=None,
          activity_regularizer=None,
          kernel_constraint=None,
          recurrent_constraint=None,
          bias_constraint=None,
          dropout=0.0,
          recurrent_dropout=0.0)
GRU(units,
    activation='tanh',
    recurrent_activation='hard_sigmoid',
    use_bias=True,
    kernel_initializer='glorot_uniform',
    recurrent_initializer='orthogonal',
    bias_initializer='zeros',
    kernel_regularizer=None,
    recurrent_regularizer=None,
    bias_regularizer=None,
    activity_regularizer=None,
    kernel_constraint=None,
    recurrent_constraint=None,
    bias_constraint=None,
    dropout=0.0,
    recurrent_dropout=0.0)
LSTM(units,
     activation='tanh',
     recurrent_activation='hard_sigmoid',
     use_bias=True,
     kernel_initializer='glorot_uniform',
     recurrent_initializer='orthogonal',
     bias_initializer='zeros',
     unit_forget_bias=True,
     kernel_regularizer=None,
     recurrent_regularizer=None,
     bias_regularizer=None,
     activity_regularizer=None,
     kernel_constraint=None,
     recurrent_constraint=None,
     bias_constraint=None,
     dropout=0.0,
     recurrent_dropout=0.0)
